/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE ESC_STATUS PACKING
package com.MAVLink.common;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
        
/**
* ESC information for higher rate streaming. Recommended streaming rate is ~10 Hz. Information that changes more slowly is sent in ESC_INFO. It should typically only be streamed on high-bandwidth links (i.e. to a companion computer).
*/
public class msg_esc_status extends MAVLinkMessage{

    public static final int MAVLINK_MSG_ID_ESC_STATUS = 291;
    public static final int MAVLINK_MSG_LENGTH = 57;
    private static final long serialVersionUID = MAVLINK_MSG_ID_ESC_STATUS;


      
    /**
    * Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
    */
    public long time_usec;
      
    /**
    * Reported motor RPM from each ESC (negative for reverse rotation).
    */
    public int rpm[] = new int[4];
      
    /**
    * Voltage measured from each ESC.
    */
    public float voltage[] = new float[4];
      
    /**
    * Current measured from each ESC.
    */
    public float current[] = new float[4];
      
    /**
    * Index of the first ESC in this message. minValue = 0, maxValue = 60, increment = 4.
    */
    public short index;
    

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_ESC_STATUS;
              
        packet.payload.putUnsignedLong(time_usec);
              
        
        for (int i = 0; i < rpm.length; i++) {
            packet.payload.putInt(rpm[i]);
        }
                    
              
        
        for (int i = 0; i < voltage.length; i++) {
            packet.payload.putFloat(voltage[i]);
        }
                    
              
        
        for (int i = 0; i < current.length; i++) {
            packet.payload.putFloat(current[i]);
        }
                    
              
        packet.payload.putUnsignedByte(index);
        
        return packet;
    }

    /**
    * Decode a esc_status message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
              
        this.time_usec = payload.getUnsignedLong();
              
         
        for (int i = 0; i < this.rpm.length; i++) {
            this.rpm[i] = payload.getInt();
        }
                
              
         
        for (int i = 0; i < this.voltage.length; i++) {
            this.voltage[i] = payload.getFloat();
        }
                
              
         
        for (int i = 0; i < this.current.length; i++) {
            this.current[i] = payload.getFloat();
        }
                
              
        this.index = payload.getUnsignedByte();
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_esc_status(){
        msgid = MAVLINK_MSG_ID_ESC_STATUS;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_esc_status(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_ESC_STATUS;
        unpack(mavLinkPacket.payload);        
    }

              
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_ESC_STATUS - sysid:"+sysid+" compid:"+compid+" time_usec:"+time_usec+" rpm:"+rpm+" voltage:"+voltage+" current:"+current+" index:"+index+"";
    }
}
        