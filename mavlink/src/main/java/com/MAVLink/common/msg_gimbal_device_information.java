/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE GIMBAL_DEVICE_INFORMATION PACKING
package com.MAVLink.common;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
        
/**
* Information about a low level gimbal. This message should be requested by the gimbal manager or a ground station using MAV_CMD_REQUEST_MESSAGE.
*/
public class msg_gimbal_device_information extends MAVLinkMessage{

    public static final int MAVLINK_MSG_ID_GIMBAL_DEVICE_INFORMATION = 283;
    public static final int MAVLINK_MSG_LENGTH = 98;
    private static final long serialVersionUID = MAVLINK_MSG_ID_GIMBAL_DEVICE_INFORMATION;


      
    /**
    * Timestamp (time since system boot).
    */
    public long time_boot_ms;
      
    /**
    * Version of the gimbal firmware, encoded as: (Dev & 0xff) << 24 | (Patch & 0xff) << 16 | (Minor & 0xff) << 8 | (Major & 0xff)
    */
    public long firmware_version;
      
    /**
    * Maximum tilt/pitch angle (positive: up, negative: down)
    */
    public float tilt_max;
      
    /**
    * Minimum tilt/pitch angle (positive: up, negative: down)
    */
    public float tilt_min;
      
    /**
    * Maximum tilt/pitch angular rate (positive: up, negative: down)
    */
    public float tilt_rate_max;
      
    /**
    * Maximum pan/yaw angle (positive: to the right, negative: to the left)
    */
    public float pan_max;
      
    /**
    * Minimum pan/yaw angle (positive: to the right, negative: to the left)
    */
    public float pan_min;
      
    /**
    * Minimum pan/yaw angular rate (positive: to the right, negative: to the left)
    */
    public float pan_rate_max;
      
    /**
    * Bitmap of gimbal capability flags.
    */
    public int cap_flags;
      
    /**
    * Name of the gimbal vendor
    */
    public short vendor_name[] = new short[32];
      
    /**
    * Name of the gimbal model
    */
    public short model_name[] = new short[32];
    

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_GIMBAL_DEVICE_INFORMATION;
              
        packet.payload.putUnsignedInt(time_boot_ms);
              
        packet.payload.putUnsignedInt(firmware_version);
              
        packet.payload.putFloat(tilt_max);
              
        packet.payload.putFloat(tilt_min);
              
        packet.payload.putFloat(tilt_rate_max);
              
        packet.payload.putFloat(pan_max);
              
        packet.payload.putFloat(pan_min);
              
        packet.payload.putFloat(pan_rate_max);
              
        packet.payload.putUnsignedShort(cap_flags);
              
        
        for (int i = 0; i < vendor_name.length; i++) {
            packet.payload.putUnsignedByte(vendor_name[i]);
        }
                    
              
        
        for (int i = 0; i < model_name.length; i++) {
            packet.payload.putUnsignedByte(model_name[i]);
        }
                    
        
        return packet;
    }

    /**
    * Decode a gimbal_device_information message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
              
        this.time_boot_ms = payload.getUnsignedInt();
              
        this.firmware_version = payload.getUnsignedInt();
              
        this.tilt_max = payload.getFloat();
              
        this.tilt_min = payload.getFloat();
              
        this.tilt_rate_max = payload.getFloat();
              
        this.pan_max = payload.getFloat();
              
        this.pan_min = payload.getFloat();
              
        this.pan_rate_max = payload.getFloat();
              
        this.cap_flags = payload.getUnsignedShort();
              
         
        for (int i = 0; i < this.vendor_name.length; i++) {
            this.vendor_name[i] = payload.getUnsignedByte();
        }
                
              
         
        for (int i = 0; i < this.model_name.length; i++) {
            this.model_name[i] = payload.getUnsignedByte();
        }
                
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_gimbal_device_information(){
        msgid = MAVLINK_MSG_ID_GIMBAL_DEVICE_INFORMATION;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_gimbal_device_information(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_GIMBAL_DEVICE_INFORMATION;
        unpack(mavLinkPacket.payload);        
    }

                          
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_GIMBAL_DEVICE_INFORMATION - sysid:"+sysid+" compid:"+compid+" time_boot_ms:"+time_boot_ms+" firmware_version:"+firmware_version+" tilt_max:"+tilt_max+" tilt_min:"+tilt_min+" tilt_rate_max:"+tilt_rate_max+" pan_max:"+pan_max+" pan_min:"+pan_min+" pan_rate_max:"+pan_rate_max+" cap_flags:"+cap_flags+" vendor_name:"+vendor_name+" model_name:"+model_name+"";
    }
}
        