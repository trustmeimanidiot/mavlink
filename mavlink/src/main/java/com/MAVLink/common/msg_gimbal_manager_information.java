/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE GIMBAL_MANAGER_INFORMATION PACKING
package com.MAVLink.common;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
        
/**
* Information about a high level gimbal manager. This message should be requested by a ground station using MAV_CMD_REQUEST_MESSAGE.
*/
public class msg_gimbal_manager_information extends MAVLinkMessage{

    public static final int MAVLINK_MSG_ID_GIMBAL_MANAGER_INFORMATION = 280;
    public static final int MAVLINK_MSG_LENGTH = 33;
    private static final long serialVersionUID = MAVLINK_MSG_ID_GIMBAL_MANAGER_INFORMATION;


      
    /**
    * Timestamp (time since system boot).
    */
    public long time_boot_ms;
      
    /**
    * Bitmap of gimbal capability flags.
    */
    public long cap_flags;
      
    /**
    * Maximum tilt/pitch angle (positive: up, negative: down)
    */
    public float tilt_max;
      
    /**
    * Minimum tilt/pitch angle (positive: up, negative: down)
    */
    public float tilt_min;
      
    /**
    * Maximum tilt/pitch angular rate (positive: up, negative: down)
    */
    public float tilt_rate_max;
      
    /**
    * Maximum pan/yaw angle (positive: to the right, negative: to the left)
    */
    public float pan_max;
      
    /**
    * Minimum pan/yaw angle (positive: to the right, negative: to the left)
    */
    public float pan_min;
      
    /**
    * Minimum pan/yaw angular rate (positive: to the right, negative: to the left)
    */
    public float pan_rate_max;
      
    /**
    * Gimbal device ID that this gimbal manager is responsible for.
    */
    public short gimbal_device_id;
    

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_GIMBAL_MANAGER_INFORMATION;
              
        packet.payload.putUnsignedInt(time_boot_ms);
              
        packet.payload.putUnsignedInt(cap_flags);
              
        packet.payload.putFloat(tilt_max);
              
        packet.payload.putFloat(tilt_min);
              
        packet.payload.putFloat(tilt_rate_max);
              
        packet.payload.putFloat(pan_max);
              
        packet.payload.putFloat(pan_min);
              
        packet.payload.putFloat(pan_rate_max);
              
        packet.payload.putUnsignedByte(gimbal_device_id);
        
        return packet;
    }

    /**
    * Decode a gimbal_manager_information message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
              
        this.time_boot_ms = payload.getUnsignedInt();
              
        this.cap_flags = payload.getUnsignedInt();
              
        this.tilt_max = payload.getFloat();
              
        this.tilt_min = payload.getFloat();
              
        this.tilt_rate_max = payload.getFloat();
              
        this.pan_max = payload.getFloat();
              
        this.pan_min = payload.getFloat();
              
        this.pan_rate_max = payload.getFloat();
              
        this.gimbal_device_id = payload.getUnsignedByte();
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_gimbal_manager_information(){
        msgid = MAVLINK_MSG_ID_GIMBAL_MANAGER_INFORMATION;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_gimbal_manager_information(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_GIMBAL_MANAGER_INFORMATION;
        unpack(mavLinkPacket.payload);        
    }

                      
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_GIMBAL_MANAGER_INFORMATION - sysid:"+sysid+" compid:"+compid+" time_boot_ms:"+time_boot_ms+" cap_flags:"+cap_flags+" tilt_max:"+tilt_max+" tilt_min:"+tilt_min+" tilt_rate_max:"+tilt_rate_max+" pan_max:"+pan_max+" pan_min:"+pan_min+" pan_rate_max:"+pan_rate_max+" gimbal_device_id:"+gimbal_device_id+"";
    }
}
        