/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE OPEN_DRONE_ID_SELF_ID PACKING
package com.MAVLink.common;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
        
/**
* Data for filling the OpenDroneID Self ID message. The Self ID Message is an opportunity for the operator to (optionally) declare their identity and purpose of the flight. This message can provide additional information that could reduce the threat profile of a UA (Unmanned Aircraft) flying in a particular area or manner.
*/
public class msg_open_drone_id_self_id extends MAVLinkMessage{

    public static final int MAVLINK_MSG_ID_OPEN_DRONE_ID_SELF_ID = 12903;
    public static final int MAVLINK_MSG_LENGTH = 46;
    private static final long serialVersionUID = MAVLINK_MSG_ID_OPEN_DRONE_ID_SELF_ID;


      
    /**
    * System ID (0 for broadcast).
    */
    public short target_system;
      
    /**
    * Component ID (0 for broadcast).
    */
    public short target_component;
      
    /**
    * Only used for drone ID data received from other UAs. See detailed description at https://mavlink.io/en/services/opendroneid.html. 
    */
    public short id_or_mac[] = new short[20];
      
    /**
    * Indicates the type of the description field.
    */
    public short description_type;
      
    /**
    * Text description or numeric value expressed as ASCII characters. Shall be filled with nulls in the unused portion of the field.
    */
    public byte description[] = new byte[23];
    

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_OPEN_DRONE_ID_SELF_ID;
              
        packet.payload.putUnsignedByte(target_system);
              
        packet.payload.putUnsignedByte(target_component);
              
        
        for (int i = 0; i < id_or_mac.length; i++) {
            packet.payload.putUnsignedByte(id_or_mac[i]);
        }
                    
              
        packet.payload.putUnsignedByte(description_type);
              
        
        for (int i = 0; i < description.length; i++) {
            packet.payload.putByte(description[i]);
        }
                    
        
        return packet;
    }

    /**
    * Decode a open_drone_id_self_id message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
              
        this.target_system = payload.getUnsignedByte();
              
        this.target_component = payload.getUnsignedByte();
              
         
        for (int i = 0; i < this.id_or_mac.length; i++) {
            this.id_or_mac[i] = payload.getUnsignedByte();
        }
                
              
        this.description_type = payload.getUnsignedByte();
              
         
        for (int i = 0; i < this.description.length; i++) {
            this.description[i] = payload.getByte();
        }
                
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_open_drone_id_self_id(){
        msgid = MAVLINK_MSG_ID_OPEN_DRONE_ID_SELF_ID;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_open_drone_id_self_id(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_OPEN_DRONE_ID_SELF_ID;
        unpack(mavLinkPacket.payload);        
    }

             
    /**
    * Sets the buffer of this message with a string, adds the necessary padding
    */
    public void setDescription(String str) {
        int len = Math.min(str.length(), 23);
        for (int i=0; i<len; i++) {
            description[i] = (byte) str.charAt(i);
        }

        for (int i=len; i<23; i++) {            // padding for the rest of the buffer
            description[i] = 0;
        }
    }

    /**
    * Gets the message, formated as a string
    */
    public String getDescription() {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 23; i++) {
            if (description[i] != 0)
                buf.append((char) description[i]);
            else
                break;
        }
        return buf.toString();

    }
                         
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_OPEN_DRONE_ID_SELF_ID - sysid:"+sysid+" compid:"+compid+" target_system:"+target_system+" target_component:"+target_component+" id_or_mac:"+id_or_mac+" description_type:"+description_type+" description:"+description+"";
    }
}
        